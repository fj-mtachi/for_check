"""
pos_filter.py COPYRIGHT FUJITSU LIMITED 2021
"""
# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PosFilter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, noun: bool=None, verb: bool=None, adjective: bool=None, adverb: bool=None, adnominal: bool=None, interjection: bool=None, other: bool=None):  # noqa: E501
        """PosFilter - a model defined in Swagger

        :param noun: The noun of this PosFilter.  # noqa: E501
        :type noun: bool
        :param verb: The verb of this PosFilter.  # noqa: E501
        :type verb: bool
        :param adjective: The adjective of this PosFilter.  # noqa: E501
        :type adjective: bool
        :param adverb: The adverb of this PosFilter.  # noqa: E501
        :type adverb: bool
        :param adnominal: The adnominal of this PosFilter.  # noqa: E501
        :type adnominal: bool
        :param interjection: The interjection of this PosFilter.  # noqa: E501
        :type interjection: bool
        :param other: The other of this PosFilter.  # noqa: E501
        :type other: bool
        """
        self.swagger_types = {
            'noun': bool,
            'verb': bool,
            'adjective': bool,
            'adverb': bool,
            'adnominal': bool,
            'interjection': bool,
            'other': bool
        }

        self.attribute_map = {
            'noun': 'noun',
            'verb': 'verb',
            'adjective': 'adjective',
            'adverb': 'adverb',
            'adnominal': 'adnominal',
            'interjection': 'interjection',
            'other': 'other'
        }
        self._noun = noun
        self._verb = verb
        self._adjective = adjective
        self._adverb = adverb
        self._adnominal = adnominal
        self._interjection = interjection
        self._other = other

    @classmethod
    def from_dict(cls, dikt) -> 'PosFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PosFilter of this PosFilter.  # noqa: E501
        :rtype: PosFilter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def noun(self) -> bool:
        """Gets the noun of this PosFilter.


        :return: The noun of this PosFilter.
        :rtype: bool
        """
        return self._noun

    @noun.setter
    def noun(self, noun: bool):
        """Sets the noun of this PosFilter.


        :param noun: The noun of this PosFilter.
        :type noun: bool
        """

        self._noun = noun

    @property
    def verb(self) -> bool:
        """Gets the verb of this PosFilter.


        :return: The verb of this PosFilter.
        :rtype: bool
        """
        return self._verb

    @verb.setter
    def verb(self, verb: bool):
        """Sets the verb of this PosFilter.


        :param verb: The verb of this PosFilter.
        :type verb: bool
        """

        self._verb = verb

    @property
    def adjective(self) -> bool:
        """Gets the adjective of this PosFilter.


        :return: The adjective of this PosFilter.
        :rtype: bool
        """
        return self._adjective

    @adjective.setter
    def adjective(self, adjective: bool):
        """Sets the adjective of this PosFilter.


        :param adjective: The adjective of this PosFilter.
        :type adjective: bool
        """

        self._adjective = adjective

    @property
    def adverb(self) -> bool:
        """Gets the adverb of this PosFilter.


        :return: The adverb of this PosFilter.
        :rtype: bool
        """
        return self._adverb

    @adverb.setter
    def adverb(self, adverb: bool):
        """Sets the adverb of this PosFilter.


        :param adverb: The adverb of this PosFilter.
        :type adverb: bool
        """

        self._adverb = adverb

    @property
    def adnominal(self) -> bool:
        """Gets the adnominal of this PosFilter.


        :return: The adnominal of this PosFilter.
        :rtype: bool
        """
        return self._adnominal

    @adnominal.setter
    def adnominal(self, adnominal: bool):
        """Sets the adnominal of this PosFilter.


        :param adnominal: The adnominal of this PosFilter.
        :type adnominal: bool
        """

        self._adnominal = adnominal

    @property
    def interjection(self) -> bool:
        """Gets the interjection of this PosFilter.


        :return: The interjection of this PosFilter.
        :rtype: bool
        """
        return self._interjection

    @interjection.setter
    def interjection(self, interjection: bool):
        """Sets the interjection of this PosFilter.


        :param interjection: The interjection of this PosFilter.
        :type interjection: bool
        """

        self._interjection = interjection

    @property
    def other(self) -> bool:
        """Gets the other of this PosFilter.


        :return: The other of this PosFilter.
        :rtype: bool
        """
        return self._other

    @other.setter
    def other(self, other: bool):
        """Sets the other of this PosFilter.


        :param other: The other of this PosFilter.
        :type other: bool
        """

        self._other = other
